@{
    ViewData["Title"] = "Listagem de Usuários";
}
@model List<VeiculoModel>

<div class="text-center">
    <br />
    <h1 class="display-4">Listagem de Veículos</h1>
    <br />
</div>


@* <div class="table-responsive"> *@
    <div class="container">
        <div row>
        <div class="d-grid gap-2 d-md-flex justify-content-md-start">
            <a class="btn btn-success" role="button" asp-controller="Veiculo" asp-action="Criar">Adicionar novo Veículo</a>
        </div>
        </div>
    </div>
    <br />

    @if (TempData["MensagemSucesso"] != null)
    {
        <div class="container">
            <div class="row">
            <div class="alert alert-success" role="alert" d-grid gap-2 d-md-flex justify-content-md-start>
                @* <button type="button" class="btn btn-danger btn-sm close-alert" aria-label="Close">X</button> *@
                @TempData["MensagemSucesso"]
            </div>
            </div>
        </div>
       
    }
    @if (TempData["MensagemErro"] != null)
    {
    <div class="container">
        <div class="row">
            <div class="alert alert-danger" role="alert" d-grid gap-2 d-md-flex justify-content-md-start>
                @* <button type="button" class="btn btn-danger btn-sm close-alert" aria-label="Close">X</button> *@
                @TempData["MensagemErro"]
            </div>
        </div>
    </div>      
    }
  
    <div class="container">
       <div class="row">
        <table class="table table-hover" id="table-veiculo">
            <thead>
                <tr>
                    <th scope="col">Prefixo</th>
                    <th scope="col">Veículo</th>
                    <th scope="col">Cor</th>
                    <th scope="col">Placa</th>
                    <th scope="col">KM</th>
                    <th scope="col">Ano</th>
                    <th scope="col">Valor</th>
                    <th scope="col">Cadastro no Sistema</th>
                    <th scope="col">Última Atualização</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null && Model.Any())
                {
                    @foreach (VeiculoModel veiculo in Model)
                    {
                        <tr>
                            <th scope="row">@veiculo.Prefixo</th>
                            <td>@veiculo.Veiculo</td>
                            <td>@veiculo.Cor</td>
                            <td>@veiculo.Placa</td>
                            <td class="formatted-quilometragem">@veiculo.Quilometragem</td>
                            <td>@veiculo.Ano</td>
                            <td class="formatted-valor">@veiculo.Valor</td>
                            <td>@veiculo.CadastroSistema</td>
                            <td>@veiculo.DataUltimaAtualizacao</td>
                            <td>
                                <div class="btn-group" role="group" aria-label="Basic example">
                                    <a role="button" class="btn btn-warning" asp-route-id="@veiculo.Id" asp-controller="Veiculo" asp-action="Editar">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <a role="button" class="btn btn-info" asp-route-id="@veiculo.Id" asp-controller="Veiculo" asp-action="Detalhes">
                                        <i class="fas fa-search"></i>
                                    </a>
                                    <a role="button" class="btn btn-danger" asp-route-id="@veiculo.Id" asp-controller="Veiculo" asp-action="ApagarConfirmacao">
                                        <i class="fas fa-trash-alt"></i>
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
       </div>
    </div>
    
@* </div> *@

<script>
    // Função para formatar o valor com separadores de milhares
    function formatValor(valor) {
        return valor.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
    }

    // Seleciona todos os elementos com a classe 'formatted-valor' e formata seus valores
    document.addEventListener('DOMContentLoaded', function () {
        const elementosValorFormatado = document.querySelectorAll('.formatted-valor');

        elementosValorFormatado.forEach(function (elemento) {
            const valor = parseFloat(elemento.textContent);
            if (!isNaN(valor)) {
                const valorFormatado = formatValor(valor);
                elemento.textContent = valorFormatado;
            }
        });
    });

    // Função para formatar a quilometragem com separadores de milhares
    function formatQuilometragem(quilometragem) {
        return quilometragem.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
    }

    // Seleciona todos os elementos com a classe 'formatted-quilometragem' e formata seus valores
    document.addEventListener('DOMContentLoaded', function () {
        const elementosQuilometragemFormatada = document.querySelectorAll('.formatted-quilometragem');

        elementosQuilometragemFormatada.forEach(function (elemento) {
            const quilometragem = parseFloat(elemento.textContent);
            if (!isNaN(quilometragem)) {
                const quilometragemFormatada = formatQuilometragem(quilometragem);
                elemento.textContent = quilometragemFormatada;
            }
        });
    });
</script>



