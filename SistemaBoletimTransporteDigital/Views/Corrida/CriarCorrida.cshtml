@using SistemaBoletimTransporteDigital.Enums;
@model CorridaModel
@{
    ViewData["Title"] = "Iniciar Corrida";
}


<div class="text-center">

    <h1 class="display-4">Iniciar corrida</h1>
    <br />

</div>

<style>
    /* Estilo para inputs em caixa alta */
    input.uppercase {
        text-transform: uppercase;
    }

    /* Estilo para inputs em caixa baixa */
    input.lowercase {
        text-transform: lowercase;
    }
</style>

<style>
    .form-control {
        border: 1px solid #5C4033;
    }
</style>

<form asp-controller="Corrida" asp-action="CriarCorrida" method="post" id="myForm">

    <div class="container">
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12">
                <label for="descricaocorrida">Descrição da corrida:</label>
                <input type="text" asp-for="DescricaoCorrida" class="form-control uppercase" oninput="this.value = this.value.toUpperCase()" maxlength="40">
                @Html.ValidationMessageFor(x => x.DescricaoCorrida)
            </div>
            <div class="col-lg-3 col-md-6 col-sm-12">
                <label for="veiculo">Selecione o Veiculo:</label>
                <select asp-for="VeiculoID" class="form-control">
                    <option disabled selected>Selecione</option>
                    @if (!Model.VeiculosDisponiveis.Any(veiculo => veiculo.CarroEmUso == CarroEmUsoEnum.Disponivel))
                    {
                        <option>Nenhum veículo disponível no momento</option>
                    }
                    else
                    {
                        @foreach (var veiculo in Model.VeiculosDisponiveis)
                        {
                            if (veiculo.CarroEmUso == CarroEmUsoEnum.Disponivel)
                            {
                                <option value="@veiculo.Id"> @veiculo.Veiculo | Cor: @veiculo.Cor | Placa: @veiculo.Placa</option>
                            }
                        }
                    }
                </select>
                @Html.ValidationMessageFor(x => x.VeiculoID)
            </div>

            <div class="col-lg-3 col-md-6 col-sm-12">
                <label for="kminicial">KM do Veículo:</label>
                <input type="text" asp-for="KmInicial" id="kminicial" class="form-control">
                <span id="kmValidationMessage" style="color: red; display: none;">O valor não pode ser 0.</span>
                @Html.ValidationMessageFor(x => x.KmInicial)
            </div>
        </div>
    </div>

    <div class="container">
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12">
                <label for="localsaida">Local de Saída:</label>
                <input type="text" asp-for="LocalSaidaCorrida" class="form-control uppercase" oninput="this.value = this.value.toUpperCase()" maxlength="40">
                @Html.ValidationMessageFor(x => x.LocalSaidaCorrida)
            </div>
        </div>
    </div>
          
    <br />

    <div class="container">
        <div class="row">
            <div class="col-12" style="display: flex; justify-content: space-between;">
                <button type="submit" class="btn btn-success">Iniciar Corrida</button>
                <a class="btn btn-secondary" asp-controller="Corrida" asp-action="Index" role="button">Voltar</a>
            </div>
        </div>
    </div>
   
</form>

<script>
    // Função para formatar o valor do campo KM do Veículo
    function formatarKmInput(input) {
        var value = input.value.replace(/\D/g, ''); // Remove caracteres não numéricos
        value = value.slice(0, 6); // Limita o número máximo de caracteres a 6
        // Adiciona separador de milhares manualmente
        var formattedValue = '';
        for (var i = 0; i < value.length; i++) {
            if (i > 0 && i % 3 === 0) {
                formattedValue = '.' + formattedValue;
            }
            formattedValue = value.charAt(value.length - 1 - i) + formattedValue;
        }
        input.value = formattedValue; // Atualiza o valor do campo
    }

    // Função para remover o ponto antes de enviar o formulário
    function removerPontoAntesSubmit() {
        var kmInput = document.getElementById('kminicial');
        // Verifica se o valor do campo KM adicional é zero
        if (parseInt(kmInput.value.replace(/\./g, ''), 10) === 0) {
            // Se for zero, cancela o envio do formulário
            alert('O valor do KM do Veículo não pode ser zero, coloque o KM válido.');
            event.preventDefault(); // Impede o envio do formulário
        }
        else if (parseInt(kmInput.value.replace(/\./g, ''), 10) === 999999) {
            // Se for 999999, cancela o envio do formulário
            alert('O valor do KM do Veículo não pode ser 999.999, coloque o KM válido.');
            event.preventDefault(); // Impede o envio do formulário
        } 
        else {
            // Se não for zero, remove todos os pontos
            kmInput.value = kmInput.value.replace(/\./g, '');
        }
    }

    // Adiciona um ouvinte de evento para chamar a função de formatação enquanto o usuário digita
    document.addEventListener('DOMContentLoaded', function () {
        var kmInput = document.getElementById('kminicial');
        kmInput.addEventListener('input', function () {
            formatarKmInput(this);
        });

        // Adiciona um ouvinte de evento para chamar a função de remoção do ponto antes do submit
        var form = document.getElementById('myForm');
        form.addEventListener('submit', function (event) {
            removerPontoAntesSubmit(event);
        });
    });
</script>








